"""add_run_event

Revision ID: 7b555de81fc9
Revises: 1537c363a63f
Create Date: 2019-06-17 19:03:33.264850

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7b555de81fc9'
down_revision = '1537c363a63f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('run_events',
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_actor', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.alter_column('administrators', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='represents the timestamp a row was initially created.',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('administrators', 'last_actor',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='represents the most recent user email to update or insert this row.',
               existing_nullable=True)
    op.alter_column('administrators', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='represents the most recent DML operation timestamp for a row.',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_table_comment(
        'brands',
        existing_comment='A single offering of a pharmaceutical company, most often a drug or medication.',
        schema=None
    )
    op.drop_table_comment(
        'pharmaceutical_companies',
        existing_comment='A single business acting as a client to IntegriChain.',
        schema=None
    )
    op.alter_column('pipeline_state_types', 'name',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='One of raw, ingest, master, enhance, enrich, metrics, dimensional.',
               existing_nullable=False)
    op.drop_table_comment(
        'pipeline_state_types',
        existing_comment='An abstract grouping of pipeline states, one of: raw, ingest, master, enrich, enhance, metrics, dimensional.',
        schema=None
    )
    op.alter_column('pipeline_states', 'graph_order',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The wave number of the pipeline state. States are executed in ascending numeric wave order, with equal wave values executing in parallel.',
               existing_nullable=False)
    op.drop_table_comment(
        'pipeline_states',
        existing_comment='A single instance of a pipeline state type comprised of ordered transform tasks.',
        schema=None
    )
    op.drop_table_comment(
        'pipeline_types',
        existing_comment='An abstract grouping of pipelines by similar purpose, ie edo, extract_only etc.',
        schema=None
    )
    op.alter_column('pipelines', 'run_frequency',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='The airflow-supported run frequency as a string (without the @ symbol). Expected values are weekly, monthly, hourly, daily, none, yearly. See https://airflow.apache.org/scheduler.html#dag-runs for more information.',
               existing_nullable=True)
    op.drop_table_comment(
        'pipelines',
        existing_comment='A single instance of a pipeline type comprised of ordered states.',
        schema=None
    )
    op.alter_column('segments', 'name',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='The business divison of IntegriChain. Expected values are Distribution, Patient and Payer.',
               existing_nullable=False)
    op.drop_table_comment(
        'segments',
        existing_comment='The business unit within IntegriChain, one of patient, payer, or distribution.',
        schema=None
    )
    op.alter_column('tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='represents the timestamp a row was initially created.',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('tags', 'last_actor',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='represents the most recent user email to update or insert this row.',
               existing_nullable=True)
    op.alter_column('tags', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='represents the most recent DML operation timestamp for a row.',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('tags', 'value',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='The textual label of the tag ie current or beta etc.',
               existing_nullable=False)
    op.drop_table_comment(
        'tags',
        existing_comment='A label used for grouping of other objects (non specific).',
        schema=None
    )
    op.alter_column('transformation_templates', 'name',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='The human readable descriptive identifier of the transformation template.',
               existing_nullable=False)
    op.alter_column('transformation_templates', 'pipeline_state_type_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The pipeline state that this transform is allowed to operate within.',
               existing_nullable=True)
    op.create_foreign_key(None, 'transformation_templates', 'pipeline_state_types', ['pipeline_state_type_id'], ['id'])
    op.drop_table_comment(
        'transformation_templates',
        existing_comment='An abstract group of transformations, usually 1:1 with a Jupyter Notebook, ie abc_unblind would be a transformation_template, abc_unblind_veritrol would be a transformation.',
        schema=None
    )
    op.alter_column('transformation_templates_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='represents the timestamp a row was initially created.',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('transformation_templates_tags', 'last_actor',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='represents the most recent user email to update or insert this row.',
               existing_nullable=True)
    op.alter_column('transformation_templates_tags', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='represents the most recent DML operation timestamp for a row.',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_table_comment(
        'transformation_templates_tags',
        existing_comment='bridge table between transformation_templates and tags.',
        schema=None
    )
    op.alter_column('transformation_variables', 'value',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_table_comment(
        'transformation_variables',
        existing_comment='A value to be injected into the transformation at runtime. Variable names and convertable data types MUST match the variable_structures for the corresponding transformation_template.',
        schema=None
    )
    op.alter_column('transformations', 'graph_order',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The wave number of the transformation within a given pipeline state. Transforms are executed in ascending numeric wave order, with equal wave values executing in parallel.',
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.drop_table_comment(
        'transformations',
        existing_comment='A single instance of a transformation template, ie abc_unblind would be a transformation_template, abc_unblind_veritrol would be a transformation.',
        schema=None
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        'transformations',
        'A single instance of a transformation template, ie abc_unblind would be a transformation_template, abc_unblind_veritrol would be a transformation.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('transformations', 'graph_order',
               existing_type=sa.INTEGER(),
               comment='The wave number of the transformation within a given pipeline state. Transforms are executed in ascending numeric wave order, with equal wave values executing in parallel.',
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.create_table_comment(
        'transformation_variables',
        'A value to be injected into the transformation at runtime. Variable names and convertable data types MUST match the variable_structures for the corresponding transformation_template.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('transformation_variables', 'value',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_table_comment(
        'transformation_templates_tags',
        'bridge table between transformation_templates and tags.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('transformation_templates_tags', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='represents the most recent DML operation timestamp for a row.',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('transformation_templates_tags', 'last_actor',
               existing_type=sa.VARCHAR(),
               comment='represents the most recent user email to update or insert this row.',
               existing_nullable=True)
    op.alter_column('transformation_templates_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='represents the timestamp a row was initially created.',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_table_comment(
        'transformation_templates',
        'An abstract group of transformations, usually 1:1 with a Jupyter Notebook, ie abc_unblind would be a transformation_template, abc_unblind_veritrol would be a transformation.',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'transformation_templates', type_='foreignkey')
    op.alter_column('transformation_templates', 'pipeline_state_type_id',
               existing_type=sa.INTEGER(),
               comment='The pipeline state that this transform is allowed to operate within.',
               existing_nullable=True)
    op.alter_column('transformation_templates', 'name',
               existing_type=sa.VARCHAR(),
               comment='The human readable descriptive identifier of the transformation template.',
               existing_nullable=False)
    op.create_table_comment(
        'tags',
        'A label used for grouping of other objects (non specific).',
        existing_comment=None,
        schema=None
    )
    op.alter_column('tags', 'value',
               existing_type=sa.VARCHAR(),
               comment='The textual label of the tag ie current or beta etc.',
               existing_nullable=False)
    op.alter_column('tags', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='represents the most recent DML operation timestamp for a row.',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('tags', 'last_actor',
               existing_type=sa.VARCHAR(),
               comment='represents the most recent user email to update or insert this row.',
               existing_nullable=True)
    op.alter_column('tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='represents the timestamp a row was initially created.',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_table_comment(
        'segments',
        'The business unit within IntegriChain, one of patient, payer, or distribution.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('segments', 'name',
               existing_type=sa.VARCHAR(),
               comment='The business divison of IntegriChain. Expected values are Distribution, Patient and Payer.',
               existing_nullable=False)
    op.create_table_comment(
        'pipelines',
        'A single instance of a pipeline type comprised of ordered states.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('pipelines', 'run_frequency',
               existing_type=sa.VARCHAR(),
               comment='The airflow-supported run frequency as a string (without the @ symbol). Expected values are weekly, monthly, hourly, daily, none, yearly. See https://airflow.apache.org/scheduler.html#dag-runs for more information.',
               existing_nullable=True)
    op.create_table_comment(
        'pipeline_types',
        'An abstract grouping of pipelines by similar purpose, ie edo, extract_only etc.',
        existing_comment=None,
        schema=None
    )
    op.create_table_comment(
        'pipeline_states',
        'A single instance of a pipeline state type comprised of ordered transform tasks.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('pipeline_states', 'graph_order',
               existing_type=sa.INTEGER(),
               comment='The wave number of the pipeline state. States are executed in ascending numeric wave order, with equal wave values executing in parallel.',
               existing_nullable=False)
    op.create_table_comment(
        'pipeline_state_types',
        'An abstract grouping of pipeline states, one of: raw, ingest, master, enrich, enhance, metrics, dimensional.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('pipeline_state_types', 'name',
               existing_type=sa.VARCHAR(),
               comment='One of raw, ingest, master, enhance, enrich, metrics, dimensional.',
               existing_nullable=False)
    op.create_table_comment(
        'pharmaceutical_companies',
        'A single business acting as a client to IntegriChain.',
        existing_comment=None,
        schema=None
    )
    op.create_table_comment(
        'brands',
        'A single offering of a pharmaceutical company, most often a drug or medication.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('administrators', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='represents the most recent DML operation timestamp for a row.',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('administrators', 'last_actor',
               existing_type=sa.VARCHAR(),
               comment='represents the most recent user email to update or insert this row.',
               existing_nullable=True)
    op.alter_column('administrators', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='represents the timestamp a row was initially created.',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_table('run_events')
    # ### end Alembic commands ###

version: '3'
services:
    airflowpg:
        image: postgres:9.6
        environment:
            - POSTGRES_USER=airflow
            - POSTGRES_PASSWORD=airflow
            - POSTGRES_DB=airflow

    airflow:
        build:
            dockerfile: ./dockerfiles/core.dockerfile
            context: .
        image: ichain/core
        depends_on:
            - airflowpg
        environment:
            - INITDB=y
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - CONFIGURATION_APPLICATION_DATABASE_HOST=configurationpg
        volumes:
            - ./core/airflow/dags:/root/airflow/dags
            - .:/usr/src/app
            - $HOME:/root
            - /var/run/docker.sock:/var/run/docker.sock
        ports:
            - "8080:8080"
        command: /airflow-entrypoint.sh webserver
        healthcheck:
            test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
            interval: 30s
            timeout: 30s
            retries: 3

    notebook:
        build:
            dockerfile: ./dockerfiles/core.dockerfile
            context: .
        image: ichain/core
        environment:
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - CONFIGURATION_APPLICATION_DATABASE_HOST=configurationpg
        volumes:
            - .:/usr/src/app
            - $HOME:/root
            - $HOME:/host/home
            - .:/host/core
            - /var/run/docker.sock:/var/run/docker.sock
        # If you want to change the port mappings, just change you
        # host port, but leave the container port as 8888
        ports:
            - "8081:8888"
            - "3022:22"
        working_dir: /host
        command: /notebook-entrypoint.sh
        depends_on:
            -  configurationpg

    configurationpg:
        image: postgres:11.1
        environment:
            - POSTGRES_USER=configurator
            - POSTGRES_PASSWORD=configurator
            - POSTGRES_DB=configuration_application
        ports: 
            - "5432:5432"

    flaskapi:
        build:
            dockerfile: ./dockerfiles/flaskapi.dockerfile
            context: .
        image: ichain/core_flask_api
        depends_on:
            - configurationpg
        volumes:
            - ./:/core/
        ports:
            - "5000:5000"

    gui:
        build:
            dockerfile: ./dockerfiles/gui.dockerfile
            context: .
        image: ichain/core_gui
        depends_on:
            - flaskapi
        environment:
            - REACT_APP_ICHAIN_API_HOST=localhost
        volumes:
            - ./core/gui:/usr/src/gui
        ports:
            - "3000:3000"

